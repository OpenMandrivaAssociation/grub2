diff --git a/grub-core/osdep/linux/platform.c b/grub-core/osdep/linux/platform.c
index 775b6c0..d45c810 100644
--- a/grub-core/osdep/linux/platform.c
+++ b/grub-core/osdep/linux/platform.c
@@ -101,13 +101,13 @@ const char *
 grub_install_get_default_x86_platform (void)
 { 
   /*
-     On Linux, we need the efivars kernel modules.
+     On Linux, we need the efivarfs kernel modules.
      If no EFI is available this module just does nothing
      besides a small hello and if we detect efi we'll load it
      anyway later. So it should be safe to
      try to load it here.
    */
-  grub_util_exec_redirect_all ((const char * []){ "modprobe", "efivars", NULL },
+  grub_util_exec_redirect_all ((const char * []){ "modprobe", "efivarfs", NULL },
 			       NULL, NULL, "/dev/null");
 
   grub_util_info ("Looking for /sys/firmware/efi ..");
diff --git a/grub-core/osdep/unix/platform.c b/grub-core/osdep/unix/platform.c
index ca448bc..17cd689 100644
--- a/grub-core/osdep/unix/platform.c
+++ b/grub-core/osdep/unix/platform.c
@@ -18,7 +18,7 @@
 
 #include <config.h>
 
-#include <grub/util/install.h>
+//#include <grub/util/install.h>
 #include <grub/emu/hostdisk.h>
 #include <grub/util/misc.h>
 #include <grub/misc.h>
@@ -78,20 +78,19 @@ get_ofpathname (const char *dev)
 		   dev);
 }
 
-static int
+static void
 grub_install_remove_efi_entries_by_distributor (const char *efi_distributor)
 {
   int fd;
   pid_t pid = grub_util_exec_pipe ((const char * []){ "efibootmgr", NULL }, &fd);
   char *line = NULL;
   size_t len = 0;
-  int rc;
 
   if (!pid)
     {
       grub_util_warn (_("Unable to open stream from %s: %s"),
 		      "efibootmgr", strerror (errno));
-      return errno;
+      return;
     }
 
   FILE *fp = fdopen (fd, "r");
@@ -99,7 +98,7 @@ grub_install_remove_efi_entries_by_distributor (const char *efi_distributor)
     {
       grub_util_warn (_("Unable to open stream from %s: %s"),
 		      "efibootmgr", strerror (errno));
-      return errno;
+      return;
     }
 
   line = xmalloc (80);
@@ -120,25 +119,23 @@ grub_install_remove_efi_entries_by_distributor (const char *efi_distributor)
       bootnum = line + sizeof ("Boot") - 1;
       bootnum[4] = '\0';
       if (!verbosity)
-	rc = grub_util_exec ((const char * []){ "efibootmgr", "-q",
+	grub_util_exec ((const char * []){ "efibootmgr", "-q",
 	      "-b", bootnum,  "-B", NULL });
       else
-	rc = grub_util_exec ((const char * []){ "efibootmgr",
+	grub_util_exec ((const char * []){ "efibootmgr",
 	      "-b", bootnum, "-B", NULL });
     }
 
   free (line);
-  return rc;
 }
 
-int
+void
 grub_install_register_efi (grub_device_t efidir_grub_dev,
 			   const char *efifile_path,
 			   const char *efi_distributor)
 {
   const char * efidir_disk;
   int efidir_part;
-  int ret;
   efidir_disk = grub_util_biosdisk_get_osdev (efidir_grub_dev->disk);
   efidir_part = efidir_grub_dev->disk->partition ? efidir_grub_dev->disk->partition->number + 1 : 1;
 
@@ -149,31 +146,28 @@ grub_install_register_efi (grub_device_t efidir_grub_dev,
       grub_util_error (_("%s: not found"), "efibootmgr");
     }
 
-  /* On Linux, we need the efivars kernel modules.  */
+  /* On Linux, we need the efivarfs kernel modules.  */
 #ifdef __linux__
-  grub_util_exec ((const char * []){ "modprobe", "-q", "efivars", NULL });
+  grub_util_exec ((const char * []){ "modprobe", "-q", "efivarfs", NULL });
 #endif
   /* Delete old entries from the same distributor.  */
-  ret = grub_install_remove_efi_entries_by_distributor (efi_distributor);
-  if (ret)
-    return ret;
+  grub_install_remove_efi_entries_by_distributor (efi_distributor);
 
   char *efidir_part_str = xasprintf ("%d", efidir_part);
 
   if (!verbosity)
-    ret = grub_util_exec ((const char * []){ "efibootmgr", "-q",
+    grub_util_exec ((const char * []){ "efibootmgr", "-q",
 	  "-c", "-d", efidir_disk,
 	  "-p", efidir_part_str, "-w",
 	  "-L", efi_distributor, "-l", 
 	  efifile_path, NULL });
   else
-    ret = grub_util_exec ((const char * []){ "efibootmgr",
+    grub_util_exec ((const char * []){ "efibootmgr",
 	  "-c", "-d", efidir_disk,
 	  "-p", efidir_part_str, "-w",
 	  "-L", efi_distributor, "-l", 
 	  efifile_path, NULL });
   free (efidir_part_str);
-  return ret;
 }
 
 void
